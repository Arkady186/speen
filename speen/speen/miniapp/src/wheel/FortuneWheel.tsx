import React from 'react'

type Props = { size?: number }

// –ü–∞–ª–∏—Ç—Ä—ã, –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–µ –∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É (—Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–∞)
const OUTER_COLORS = [
    '#b91c1c', // —Ç—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
    '#ef4444', // –∫—Ä–∞—Å–Ω—ã–π
    '#f59e0b', // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    '#f97316', // —è—Ä–∫–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    '#fde047', // –∂—ë–ª—Ç—ã–π
    '#a3e635', // —Å–∞–ª–∞—Ç–æ–≤—ã–π
    '#22c55e', // –∑–µ–ª—ë–Ω—ã–π
    '#10b981', // –∑–µ–ª—ë–Ω–æ-–±–∏—Ä—é–∑–æ–≤—ã–π
    '#06b6d4', // –±–∏—Ä—é–∑–æ–≤—ã–π
    '#3b82f6', // —Å–∏–Ω–∏–π
    '#7c3aed', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    '#d946ef', // –ø—É—Ä–ø—É—Ä
]
const INNER_COLORS = [
    '#84cc16', // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
    '#22c55e', // –∑–µ–ª—ë–Ω—ã–π
    '#06b6d4', // –±–∏—Ä—é–∑–æ–≤—ã–π
    '#3b82f6', // —Å–∏–Ω–∏–π
    '#7c3aed', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    '#d946ef', // –ø—É—Ä–ø—É—Ä
    '#ef4444', // –∫—Ä–∞—Å–Ω—ã–π
    '#b91c1c', // —Ç—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
    '#f472b6', // —Ä–æ–∑–æ–≤—ã–π
    '#f97316', // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    '#fde047', // –∂—ë–ª—Ç—ã–π
    '#a3e635', // —Å–∞–ª–∞—Ç–æ–≤—ã–π
]

// –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–æ–Ω–µ—Ç—ã —Å –±—É–∫–≤–æ–π W. –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ public/coin-w.png
const COIN_W_SRC = '/coin-w.png'

type InnerIcon = { type: 'coin' } | { type: 'emoji', value: string }
// –ò–∫–æ–Ω–∫–∏ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫–æ–ª—å—Ü–µ (–º–æ–Ω–µ—Ç—ã —á–∞—â–µ)
const INNER_ICONS: InnerIcon[] = [
    { type: 'coin' },        // 0 ‚Äî –º–æ–Ω–µ—Ç—ã
    { type: 'emoji', value: 'üöÄ' }, // 1 ‚Äî —Ä–∞–∫–µ—Ç–∞
    { type: 'emoji', value: 'üîã' }, // 2 ‚Äî –∑–∞—Ä—è–¥
    { type: 'coin' },        // 3 ‚Äî –º–æ–Ω–µ—Ç—ã
    { type: 'emoji', value: '‚ù§Ô∏è' }, // 4 ‚Äî —Å–µ—Ä–¥—Ü–µ
    { type: 'coin' },        // 5 ‚Äî –º–æ–Ω–µ—Ç—ã
    { type: 'emoji', value: 'üçü' }, // 6 ‚Äî –µ–¥–∞
    { type: 'coin' },        // 7 ‚Äî –º–æ–Ω–µ—Ç—ã
    { type: 'emoji', value: '‚ù§Ô∏è' }, // 8 ‚Äî —Å–µ—Ä–¥—Ü–µ
    { type: 'coin' },        // 9 ‚Äî –º–æ–Ω–µ—Ç—ã
]

export function FortuneWheel({ size = 260 }: Props) {
    const rOuter = 100
    const rOuterRing = 92   // –∂—ë–ª—Ç—ã–π –æ–±–æ–¥
    const rOuterInner = 78  // –≤–Ω–µ—à–Ω–∏–π —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    const rInnerOuter = 78  // —Ä–∞–≤–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫—Ä—É–≥–∞ ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ —á—ë—Ä–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞
    const rInnerInner = 30  // –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
    const rHub = 30         // —Å—Ç—É–ø–∏—Ü–∞ –≤–ø–ª–æ—Ç–Ω—É—é –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∫—Ä—É–≥—É
    const strokeBlack = 6

    function arcPath(r1: number, r2: number, start: number, end: number) {
        const toXY = (r: number, ang: number) => [r * Math.cos(ang), r * Math.sin(ang)]
        const large = end - start > Math.PI ? 1 : 0
        const [x1, y1] = toXY(r1, start)
        const [x2, y2] = toXY(r1, end)
        const [x3, y3] = toXY(r2, end)
        const [x4, y4] = toXY(r2, start)
        return `M ${x1} ${y1} A ${r1} ${r1} 0 ${large} 1 ${x2} ${y2} L ${x3} ${y3} A ${r2} ${r2} 0 ${large} 0 ${x4} ${y4} Z`
    }

    // —à–∞–≥ —É–≥–ª–∞: –æ–±–∞ –∫–æ–ª—å—Ü–∞ –ø–æ 10 —Å–ª–æ—Ç–æ–≤, —Ä–∞–¥–∏–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    const segOuter = (2 * Math.PI) / 10
    const toDeg = (rad: number) => (rad * 180) / Math.PI

    return (
        <div style={{ width: size, height: size }}>
            <svg viewBox={[-rOuter-8, -rOuter-8, (rOuter+8)*2, (rOuter+8)*2].join(' ')} width={size} height={size}>
                {/* outer black outline */}
                <circle cx={0} cy={0} r={rOuter} fill="none" stroke="#000" strokeWidth={strokeBlack} />
                {/* outer yellow donut (–±–µ–∑ —Ä–∞–¥–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π) */}
                <path d={arcPath(rOuter, rOuterRing, 0, 2*Math.PI)} fill="#f6e24d" stroke="#000" strokeWidth={4} />

                {/* –≤–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ: 10 —Ü–≤–µ—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ */}
                {Array.from({ length: 10 }).map((_, i) => {
                    const start = i * segOuter
                    const end = (i + 1) * segOuter
                    return (
                        <path key={`o-${i}`} d={arcPath(rOuterRing, rOuterInner, start, end)} fill={OUTER_COLORS[i % OUTER_COLORS.length]} stroke="#000" strokeWidth={3} />
                    )
                })}

                {/* —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å (–±–µ–∑ –∑–∞–ª–∏–≤–∫–∏) –≤–º–µ—Å—Ç–æ —Å–∏–Ω–µ–≥–æ –∫–æ–ª—å—Ü–∞ */}
                <circle cx={0} cy={0} r={rInnerOuter} fill="none" stroke="#000" strokeWidth={3} />

                {/* –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ: 10 —Å–ª–æ—Ç–æ–≤, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –≤–Ω–µ—à–Ω–∏–º */}
                {Array.from({ length: 10 }).map((_, i) => {
                    const start = i * segOuter
                    const end = (i + 1) * segOuter
                    return (
                        <path key={`i-${i}`} d={arcPath(rInnerOuter, rInnerInner, start, end)} fill={INNER_COLORS[i % INNER_COLORS.length]} stroke="#000" strokeWidth={3} />
                    )
                })}

                {/* –∏–∫–æ–Ω–∫–∏ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫–æ–ª—å—Ü–µ */}
                {Array.from({ length: 10 }).map((_, i) => {
                    const angle = i * segOuter + segOuter / 2
                    const rIcon = (rInnerInner + rInnerOuter) / 2
                    const icon = INNER_ICONS[i % INNER_ICONS.length]
                    const commonTransform = `rotate(${toDeg(angle)}) translate(${rIcon} 0) rotate(${-toDeg(angle)})`
                    const coinSize = 22
                    return (
                        <g key={`icon-${i}`} transform={commonTransform}>
                            {/* fallback: —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞ */}
                            {icon.type === 'emoji' && (
                                <text x={0} y={0} fontSize={16} fontWeight={700} textAnchor="middle" dominantBaseline="middle">{icon.value}</text>
                            )}
                            {icon.type === 'coin' && (
                                <>
                                    {/* –≤–∏–¥–∏–º—ã–π –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: —ç–º–æ–¥–∑–∏ –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π */}
                                    <text x={0} y={0} fontSize={16} fontWeight={700} textAnchor="middle" dominantBaseline="middle">üí∞</text>
                                    <image href={COIN_W_SRC} width={coinSize} height={coinSize} x={-coinSize/2} y={-coinSize/2} preserveAspectRatio="xMidYMid meet" />
                                </>
                            )}
                        </g>
                    )
                })}

                {/* —á–∏—Å–ª–∞ 0‚Äì9 –ø–æ 10 —Å–ª–æ—Ç–∞–º */}
                {(() => {
                    const DIGITS = ['0','1','2','3','4','5','6','7','8','9']
                    return DIGITS.map((label, i) => {
                        const angle = i * segOuter + segOuter / 2
                        const rText = (rOuterInner + rOuterRing) / 2
                        return (
                            <text key={`t-${i}`} x={0} y={0} fontSize={9} fontWeight={900} fill="#000" textAnchor="middle" dominantBaseline="middle" transform={`rotate(${toDeg(angle)}) translate(${rText} 0)`}>
                                {label}
                            </text>
                        )
                    })
                })()}

                {/* hub: red with black contour */}
                <circle cx={0} cy={0} r={rHub} fill="#e53935" stroke="#000" strokeWidth={3} />
            </svg>
        </div>
    )
}


